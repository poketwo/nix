apiVersion: v1
data:
  fix-split-brain.sh: "HOSTNAME=\"$(hostname)\"\nINDEX=\"${HOSTNAME##*-}\"\nSENTINEL_PORT=26379\n\
    ANNOUNCE_IP=''\nMASTER=''\nMASTER_GROUP=\"argocd\"\nQUORUM=\"2\"\nREDIS_CONF=/data/conf/redis.conf\n\
    REDIS_PORT=6379\nREDIS_TLS_PORT=\nSENTINEL_CONF=/data/conf/sentinel.conf\nSENTINEL_TLS_PORT=\n\
    SERVICE=argocd-redis-ha\nSENTINEL_TLS_REPLICATION_ENABLED=false\nREDIS_TLS_REPLICATION_ENABLED=false\n\
    \nROLE=''\nREDIS_MASTER=''\n\nset -eu\nsentinel_get_master() {\nset +e\n    if\
    \ [ \"$SENTINEL_PORT\" -eq 0 ]; then\n        redis-cli -h \"${SERVICE}\" -p \"\
    ${SENTINEL_TLS_PORT}\"  --tls --cacert /tls-certs/ca.crt  --cert /tls-certs/redis.crt\
    \ --key /tls-certs/redis.key sentinel get-master-addr-by-name \"${MASTER_GROUP}\"\
    \ |\\\n        grep -E '((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\
    .){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?s*$))'\n\
    \    else\n        redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_PORT}\"  sentinel\
    \ get-master-addr-by-name \"${MASTER_GROUP}\" |\\\n        grep -E '((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\
    .){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?s*$))'\n\
    \    fi\nset -e\n}\n\nsentinel_get_master_retry() {\n    master=''\n    retry=${1}\n\
    \    sleep=3\n    for i in $(seq 1 \"${retry}\"); do\n        master=$(sentinel_get_master)\n\
    \        if [ -n \"${master}\" ]; then\n            break\n        fi\n      \
    \  sleep $((sleep + i))\n    done\n    echo \"${master}\"\n}\n\nidentify_master()\
    \ {\n    echo \"Identifying redis master (get-master-addr-by-name)..\"\n    echo\
    \ \"  using sentinel (argocd-redis-ha), sentinel group name (argocd)\"\n    MASTER=\"\
    $(sentinel_get_master_retry 3)\"\n    if [ -n \"${MASTER}\" ]; then\n        echo\
    \ \"  $(date) Found redis master (${MASTER})\"\n    else\n        echo \"  $(date)\
    \ Did not find redis master (${MASTER})\"\n    fi\n}\n\nsentinel_update() {\n\
    \    echo \"Updating sentinel config..\"\n    echo \"  evaluating sentinel id\
    \ (\\${SENTINEL_ID_${INDEX}})\"\n    eval MY_SENTINEL_ID=\"\\$SENTINEL_ID_${INDEX}\"\
    \n    echo \"  sentinel id (${MY_SENTINEL_ID}), sentinel grp (${MASTER_GROUP}),\
    \ quorum (${QUORUM})\"\n    sed -i \"1s/^/sentinel myid ${MY_SENTINEL_ID}\\\\\
    n/\" \"${SENTINEL_CONF}\"\n    if [ \"$SENTINEL_TLS_REPLICATION_ENABLED\" = true\
    \ ]; then\n        echo \"  redis master (${1}:${REDIS_TLS_PORT})\"\n        sed\
    \ -i \"2s/^/sentinel monitor ${MASTER_GROUP} ${1} ${REDIS_TLS_PORT} ${QUORUM}\
    \ \\\\n/\" \"${SENTINEL_CONF}\"\n    else\n        echo \"  redis master (${1}:${REDIS_PORT})\"\
    \n        sed -i \"2s/^/sentinel monitor ${MASTER_GROUP} ${1} ${REDIS_PORT} ${QUORUM}\
    \ \\\\n/\" \"${SENTINEL_CONF}\"\n    fi\n    echo \"sentinel announce-ip ${ANNOUNCE_IP}\"\
    \ >> ${SENTINEL_CONF}\n    if [ \"$SENTINEL_PORT\" -eq 0 ]; then\n        echo\
    \ \"  announce (${ANNOUNCE_IP}:${SENTINEL_TLS_PORT})\"\n        echo \"sentinel\
    \ announce-port ${SENTINEL_TLS_PORT}\" >> ${SENTINEL_CONF}\n    else\n       \
    \ echo \"  announce (${ANNOUNCE_IP}:${SENTINEL_PORT})\"\n        echo \"sentinel\
    \ announce-port ${SENTINEL_PORT}\" >> ${SENTINEL_CONF}\n    fi\n}\n\nredis_update()\
    \ {\n    echo \"Updating redis config..\"\n    if [ \"$REDIS_TLS_REPLICATION_ENABLED\"\
    \ = true ]; then\n        echo \"  we are slave of redis master (${1}:${REDIS_TLS_PORT})\"\
    \n        echo \"slaveof ${1} ${REDIS_TLS_PORT}\" >> \"${REDIS_CONF}\"\n     \
    \   echo \"slave-announce-port ${REDIS_TLS_PORT}\" >> ${REDIS_CONF}\n    else\n\
    \        echo \"  we are slave of redis master (${1}:${REDIS_PORT})\"\n      \
    \  echo \"slaveof ${1} ${REDIS_PORT}\" >> \"${REDIS_CONF}\"\n        echo \"slave-announce-port\
    \ ${REDIS_PORT}\" >> ${REDIS_CONF}\n    fi\n    echo \"slave-announce-ip ${ANNOUNCE_IP}\"\
    \ >> ${REDIS_CONF}\n}\n\ncopy_config() {\n    echo \"Copying default redis config..\"\
    \n    echo \"  to '${REDIS_CONF}'\"\n    cp /readonly-config/redis.conf \"${REDIS_CONF}\"\
    \n    echo \"Copying default sentinel config..\"\n    echo \"  to '${SENTINEL_CONF}'\"\
    \n    cp /readonly-config/sentinel.conf \"${SENTINEL_CONF}\"\n}\n\nsetup_defaults()\
    \ {\n    echo \"Setting up defaults..\"\n    echo \"  using statefulset index\
    \ (${INDEX})\"\n    if [ \"${INDEX}\" = \"0\" ]; then\n        echo \"Setting\
    \ this pod as master for redis and sentinel..\"\n        echo \"  using announce\
    \ (${ANNOUNCE_IP})\"\n        redis_update \"${ANNOUNCE_IP}\"\n        sentinel_update\
    \ \"${ANNOUNCE_IP}\"\n        echo \"  make sure ${ANNOUNCE_IP} is not a slave\
    \ (slaveof no one)\"\n        sed -i \"s/^.*slaveof.*//\" \"${REDIS_CONF}\"\n\
    \    else\n        echo \"Getting redis master ip..\"\n        echo \"  blindly\
    \ assuming (${SERVICE}-announce-0) or (${SERVICE}-server-0) are master\"\n   \
    \     DEFAULT_MASTER=\"$(getent_hosts 0 | awk '{ print $1 }')\"\n        if [\
    \ -z \"${DEFAULT_MASTER}\" ]; then\n            echo \"Error: Unable to resolve\
    \ redis master (getent hosts).\"\n            exit 1\n        fi\n        echo\
    \ \"  identified redis (may be redis master) ip (${DEFAULT_MASTER})\"\n      \
    \  echo \"Setting default slave config for redis and sentinel..\"\n        echo\
    \ \"  using master ip (${DEFAULT_MASTER})\"\n        redis_update \"${DEFAULT_MASTER}\"\
    \n        sentinel_update \"${DEFAULT_MASTER}\"\n    fi\n}\n\nredis_ping() {\n\
    set +e\n    if [ \"$REDIS_PORT\" -eq 0 ]; then\n        redis-cli -h \"${MASTER}\"\
    \ -a \"${AUTH}\" --no-auth-warning -p \"${REDIS_TLS_PORT}\" --tls --cacert /tls-certs/ca.crt\
    \  --cert /tls-certs/redis.crt --key /tls-certs/redis.key ping\n    else\n   \
    \     redis-cli -h \"${MASTER}\" -a \"${AUTH}\" --no-auth-warning -p \"${REDIS_PORT}\"\
    \ ping\n    fi\nset -e\n}\n\nredis_ping_retry() {\n    ping=''\n    retry=${1}\n\
    \    sleep=3\n    for i in $(seq 1 \"${retry}\"); do\n        if [ \"$(redis_ping)\"\
    \ = \"PONG\" ]; then\n           ping='PONG'\n           break\n        fi\n \
    \       sleep $((sleep + i))\n        MASTER=$(sentinel_get_master)\n    done\n\
    \    echo \"${ping}\"\n}\n\nfind_master() {\n    echo \"Verifying redis master..\"\
    \n    if [ \"$REDIS_PORT\" -eq 0 ]; then\n        echo \"  ping (${MASTER}:${REDIS_TLS_PORT})\"\
    \n    else\n        echo \"  ping (${MASTER}:${REDIS_PORT})\"\n    fi\n    if\
    \ [ \"$(redis_ping_retry 3)\" != \"PONG\" ]; then\n        echo \"  $(date) Can't\
    \ ping redis master (${MASTER})\"\n        echo \"Attempting to force failover\
    \ (sentinel failover)..\"\n\n        if [ \"$SENTINEL_PORT\" -eq 0 ]; then\n \
    \           echo \"  on sentinel (${SERVICE}:${SENTINEL_TLS_PORT}), sentinel grp\
    \ (${MASTER_GROUP})\"\n            if redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_TLS_PORT}\"\
    \  --tls --cacert /tls-certs/ca.crt  --cert /tls-certs/redis.crt --key /tls-certs/redis.key\
    \ sentinel failover \"${MASTER_GROUP}\" | grep -q 'NOGOODSLAVE' ; then\n     \
    \           echo \"  $(date) Failover returned with 'NOGOODSLAVE'\"\n        \
    \        echo \"Setting defaults for this pod..\"\n                setup_defaults\n\
    \                return 0\n            fi\n        else\n            echo \" \
    \ on sentinel (${SERVICE}:${SENTINEL_PORT}), sentinel grp (${MASTER_GROUP})\"\n\
    \            if redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_PORT}\"  sentinel\
    \ failover \"${MASTER_GROUP}\" | grep -q 'NOGOODSLAVE' ; then\n              \
    \  echo \"  $(date) Failover returned with 'NOGOODSLAVE'\"\n                echo\
    \ \"Setting defaults for this pod..\"\n                setup_defaults\n      \
    \          return 0\n            fi\n        fi\n\n        echo \"Hold on for\
    \ 10sec\"\n        sleep 10\n        echo \"We should get redis master's ip now.\
    \ Asking (get-master-addr-by-name)..\"\n        if [ \"$SENTINEL_PORT\" -eq 0\
    \ ]; then\n            echo \"  sentinel (${SERVICE}:${SENTINEL_TLS_PORT}), sentinel\
    \ grp (${MASTER_GROUP})\"\n        else\n            echo \"  sentinel (${SERVICE}:${SENTINEL_PORT}),\
    \ sentinel grp (${MASTER_GROUP})\"\n        fi\n        MASTER=\"$(sentinel_get_master)\"\
    \n        if [ \"${MASTER}\" ]; then\n            echo \"  $(date) Found redis\
    \ master (${MASTER})\"\n            echo \"Updating redis and sentinel config..\"\
    \n            sentinel_update \"${MASTER}\"\n            redis_update \"${MASTER}\"\
    \n        else\n            echo \"$(date) Error: Could not failover, exiting...\"\
    \n            exit 1\n        fi\n    else\n        echo \"  $(date) Found reachable\
    \ redis master (${MASTER})\"\n        echo \"Updating redis and sentinel config..\"\
    \n        sentinel_update \"${MASTER}\"\n        redis_update \"${MASTER}\"\n\
    \    fi\n}\n\nredis_ro_update() {\n    echo \"Updating read-only redis config..\"\
    \n    echo \"  redis.conf set 'replica-priority 0'\"\n    echo \"replica-priority\
    \ 0\" >> ${REDIS_CONF}\n}\n\ngetent_hosts() {\n    index=${1:-${INDEX}}\n    service=\"\
    ${SERVICE}-announce-${index}\"\n    host=$(getent hosts \"${service}\")\n    echo\
    \ \"${host}\"\n}\n\nidentify_announce_ip() {\n    echo \"Identify announce ip\
    \ for this pod..\"\n    echo \"  using (${SERVICE}-announce-${INDEX}) or (${SERVICE}-server-${INDEX})\"\
    \n    ANNOUNCE_IP=$(getent_hosts | awk '{ print $1 }')\n    echo \"  identified\
    \ announce (${ANNOUNCE_IP})\"\n}\n\nredis_role() {\nset +e\n    if [ \"$REDIS_PORT\"\
    \ -eq 0 ]; then\n        ROLE=$(redis-cli  -a \"${AUTH}\" --no-auth-warning -p\
    \ \"${REDIS_TLS_PORT}\" --tls --cacert /tls-certs/ca.crt  --cert /tls-certs/redis.crt\
    \ --key /tls-certs/redis.key info | grep role | sed 's/role://' | sed 's/\\r//')\n\
    \    else\n        ROLE=$(redis-cli  -a \"${AUTH}\" --no-auth-warning -p \"${REDIS_PORT}\"\
    \ info | grep role | sed 's/role://' | sed 's/\\r//')\n    fi\nset -e\n}\n\nidentify_redis_master()\
    \ {\nset +e\n    if [ \"$REDIS_PORT\" -eq 0 ]; then\n        REDIS_MASTER=$(redis-cli\
    \  -a \"${AUTH}\" --no-auth-warning -p \"${REDIS_TLS_PORT}\" --tls --cacert /tls-certs/ca.crt\
    \  --cert /tls-certs/redis.crt --key /tls-certs/redis.key info | grep master_host\
    \ | sed 's/master_host://' | sed 's/\\r//')\n    else\n        REDIS_MASTER=$(redis-cli\
    \  -a \"${AUTH}\" --no-auth-warning -p \"${REDIS_PORT}\" info | grep master_host\
    \ | sed 's/master_host://' | sed 's/\\r//')\n    fi\nset -e\n}\n\nreinit() {\n\
    set +e\n    sh /readonly-config/init.sh\n\n    if [ \"$REDIS_PORT\" -eq 0 ]; then\n\
    \        echo \"shutdown\" | redis-cli  -a \"${AUTH}\" --no-auth-warning -p \"\
    ${REDIS_TLS_PORT}\" --tls --cacert /tls-certs/ca.crt  --cert /tls-certs/redis.crt\
    \ --key /tls-certs/redis.key\n    else\n        echo \"shutdown\" | redis-cli\
    \  -a \"${AUTH}\" --no-auth-warning -p \"${REDIS_PORT}\"\n    fi\nset -e\n}\n\n\
    identify_announce_ip\n\nwhile [ -z \"${ANNOUNCE_IP}\" ]; do\n    echo \"Error:\
    \ Could not resolve the announce ip for this pod.\"\n    sleep 30\n    identify_announce_ip\n\
    done\n\nwhile true; do\n    sleep 60\n\n    # where is redis master\n    identify_master\n\
    \n    if [ \"$MASTER\" = \"$ANNOUNCE_IP\" ]; then\n        redis_role\n      \
    \  if [ \"$ROLE\" != \"master\" ]; then\n            reinit\n        fi\n    elif\
    \ [ \"${MASTER}\" ]; then\n        identify_redis_master\n        if [ \"$REDIS_MASTER\"\
    \ != \"$MASTER\" ]; then\n            reinit\n        fi\n    fi\ndone\n"
  haproxy.cfg: "defaults REDIS\n  mode tcp\n  timeout connect 4s\n  timeout server\
    \ 330s\n  timeout client 330s\n  timeout check 2s\n\nlisten health_check_http_url\n\
    \  bind [::]:8888  v4v6\n  mode http\n  monitor-uri /healthz\n  option      dontlognull\n\
    # Check Sentinel and whether they are nominated master\nbackend check_if_redis_is_master_0\n\
    \  mode tcp\n  option tcp-check\n  tcp-check connect\n  tcp-check send PING\\\
    r\\n\n  tcp-check expect string +PONG\n  tcp-check send SENTINEL\\ get-master-addr-by-name\\\
    \ argocd\\r\\n\n  tcp-check expect string REPLACE_ANNOUNCE0\n  tcp-check send\
    \ QUIT\\r\\n\n  server R0 argocd-redis-ha-announce-0:26379 check inter 1s\n  server\
    \ R1 argocd-redis-ha-announce-1:26379 check inter 1s\n  server R2 argocd-redis-ha-announce-2:26379\
    \ check inter 1s\n# Check Sentinel and whether they are nominated master\nbackend\
    \ check_if_redis_is_master_1\n  mode tcp\n  option tcp-check\n  tcp-check connect\n\
    \  tcp-check send PING\\r\\n\n  tcp-check expect string +PONG\n  tcp-check send\
    \ SENTINEL\\ get-master-addr-by-name\\ argocd\\r\\n\n  tcp-check expect string\
    \ REPLACE_ANNOUNCE1\n  tcp-check send QUIT\\r\\n\n  server R0 argocd-redis-ha-announce-0:26379\
    \ check inter 1s\n  server R1 argocd-redis-ha-announce-1:26379 check inter 1s\n\
    \  server R2 argocd-redis-ha-announce-2:26379 check inter 1s\n# Check Sentinel\
    \ and whether they are nominated master\nbackend check_if_redis_is_master_2\n\
    \  mode tcp\n  option tcp-check\n  tcp-check connect\n  tcp-check send PING\\\
    r\\n\n  tcp-check expect string +PONG\n  tcp-check send SENTINEL\\ get-master-addr-by-name\\\
    \ argocd\\r\\n\n  tcp-check expect string REPLACE_ANNOUNCE2\n  tcp-check send\
    \ QUIT\\r\\n\n  server R0 argocd-redis-ha-announce-0:26379 check inter 1s\n  server\
    \ R1 argocd-redis-ha-announce-1:26379 check inter 1s\n  server R2 argocd-redis-ha-announce-2:26379\
    \ check inter 1s\n\n# decide redis backend to use\n#master\nfrontend ft_redis_master\n\
    \  bind [::]:6379 v4v6\n  use_backend bk_redis_master\n# Check all redis servers\
    \ to see if they think they are master\nbackend bk_redis_master\n  mode tcp\n\
    \  option tcp-check\n  tcp-check connect\n  tcp-check send \"AUTH ${AUTH}\"\\\
    r\\n\n  tcp-check expect string +OK\n  tcp-check send PING\\r\\n\n  tcp-check\
    \ expect string +PONG\n  tcp-check send info\\ replication\\r\\n\n  tcp-check\
    \ expect string role:master\n  tcp-check send QUIT\\r\\n\n  tcp-check expect string\
    \ +OK\n  use-server R0 if { srv_is_up(R0) } { nbsrv(check_if_redis_is_master_0)\
    \ ge 2 }\n  server R0 argocd-redis-ha-announce-0:6379 check inter 1s fall 1 rise\
    \ 1\n  use-server R1 if { srv_is_up(R1) } { nbsrv(check_if_redis_is_master_1)\
    \ ge 2 }\n  server R1 argocd-redis-ha-announce-1:6379 check inter 1s fall 1 rise\
    \ 1\n  use-server R2 if { srv_is_up(R2) } { nbsrv(check_if_redis_is_master_2)\
    \ ge 2 }\n  server R2 argocd-redis-ha-announce-2:6379 check inter 1s fall 1 rise\
    \ 1\nfrontend stats\n  mode http\n  bind [::]:9101 v4v6\n  http-request use-service\
    \ prometheus-exporter if { path /metrics }\n  stats enable\n  stats uri /stats\n\
    \  stats refresh 10s\n"
  haproxy_init.sh: "HAPROXY_CONF=/data/haproxy.cfg\ncp /readonly/haproxy.cfg \"$HAPROXY_CONF\"\
    \nfor loop in $(seq 1 10); do\n  getent hosts argocd-redis-ha-announce-0 && break\n\
    \  echo \"Waiting for service argocd-redis-ha-announce-0 to be ready ($loop) ...\"\
    \ && sleep 1\ndone\nANNOUNCE_IP0=$(getent hosts \"argocd-redis-ha-announce-0\"\
    \ | awk '{ print $1 }')\nif [ -z \"$ANNOUNCE_IP0\" ]; then\n  echo \"Could not\
    \ resolve the announce ip for argocd-redis-ha-announce-0\"\n  exit 1\nfi\nsed\
    \ -i \"s/REPLACE_ANNOUNCE0/$ANNOUNCE_IP0/\" \"$HAPROXY_CONF\"\nfor loop in $(seq\
    \ 1 10); do\n  getent hosts argocd-redis-ha-announce-1 && break\n  echo \"Waiting\
    \ for service argocd-redis-ha-announce-1 to be ready ($loop) ...\" && sleep 1\n\
    done\nANNOUNCE_IP1=$(getent hosts \"argocd-redis-ha-announce-1\" | awk '{ print\
    \ $1 }')\nif [ -z \"$ANNOUNCE_IP1\" ]; then\n  echo \"Could not resolve the announce\
    \ ip for argocd-redis-ha-announce-1\"\n  exit 1\nfi\nsed -i \"s/REPLACE_ANNOUNCE1/$ANNOUNCE_IP1/\"\
    \ \"$HAPROXY_CONF\"\nfor loop in $(seq 1 10); do\n  getent hosts argocd-redis-ha-announce-2\
    \ && break\n  echo \"Waiting for service argocd-redis-ha-announce-2 to be ready\
    \ ($loop) ...\" && sleep 1\ndone\nANNOUNCE_IP2=$(getent hosts \"argocd-redis-ha-announce-2\"\
    \ | awk '{ print $1 }')\nif [ -z \"$ANNOUNCE_IP2\" ]; then\n  echo \"Could not\
    \ resolve the announce ip for argocd-redis-ha-announce-2\"\n  exit 1\nfi\nsed\
    \ -i \"s/REPLACE_ANNOUNCE2/$ANNOUNCE_IP2/\" \"$HAPROXY_CONF\"\n"
  init.sh: "echo \"$(date) Start...\"\nHOSTNAME=\"$(hostname)\"\nINDEX=\"${HOSTNAME##*-}\"\
    \nSENTINEL_PORT=26379\nANNOUNCE_IP=''\nMASTER=''\nMASTER_GROUP=\"argocd\"\nQUORUM=\"\
    2\"\nREDIS_CONF=/data/conf/redis.conf\nREDIS_PORT=6379\nREDIS_TLS_PORT=\nSENTINEL_CONF=/data/conf/sentinel.conf\n\
    SENTINEL_TLS_PORT=\nSERVICE=argocd-redis-ha\nSENTINEL_TLS_REPLICATION_ENABLED=false\n\
    REDIS_TLS_REPLICATION_ENABLED=false\n\nset -eu\nsentinel_get_master() {\nset +e\n\
    \    if [ \"$SENTINEL_PORT\" -eq 0 ]; then\n        redis-cli -h \"${SERVICE}\"\
    \ -p \"${SENTINEL_TLS_PORT}\"  --tls --cacert /tls-certs/ca.crt  --cert /tls-certs/redis.crt\
    \ --key /tls-certs/redis.key sentinel get-master-addr-by-name \"${MASTER_GROUP}\"\
    \ |\\\n        grep -E '((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\
    .){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?s*$))'\n\
    \    else\n        redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_PORT}\"  sentinel\
    \ get-master-addr-by-name \"${MASTER_GROUP}\" |\\\n        grep -E '((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\
    .){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\\
    d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?s*$))'\n\
    \    fi\nset -e\n}\n\nsentinel_get_master_retry() {\n    master=''\n    retry=${1}\n\
    \    sleep=3\n    for i in $(seq 1 \"${retry}\"); do\n        master=$(sentinel_get_master)\n\
    \        if [ -n \"${master}\" ]; then\n            break\n        fi\n      \
    \  sleep $((sleep + i))\n    done\n    echo \"${master}\"\n}\n\nidentify_master()\
    \ {\n    echo \"Identifying redis master (get-master-addr-by-name)..\"\n    echo\
    \ \"  using sentinel (argocd-redis-ha), sentinel group name (argocd)\"\n    MASTER=\"\
    $(sentinel_get_master_retry 3)\"\n    if [ -n \"${MASTER}\" ]; then\n        echo\
    \ \"  $(date) Found redis master (${MASTER})\"\n    else\n        echo \"  $(date)\
    \ Did not find redis master (${MASTER})\"\n    fi\n}\n\nsentinel_update() {\n\
    \    echo \"Updating sentinel config..\"\n    echo \"  evaluating sentinel id\
    \ (\\${SENTINEL_ID_${INDEX}})\"\n    eval MY_SENTINEL_ID=\"\\$SENTINEL_ID_${INDEX}\"\
    \n    echo \"  sentinel id (${MY_SENTINEL_ID}), sentinel grp (${MASTER_GROUP}),\
    \ quorum (${QUORUM})\"\n    sed -i \"1s/^/sentinel myid ${MY_SENTINEL_ID}\\\\\
    n/\" \"${SENTINEL_CONF}\"\n    if [ \"$SENTINEL_TLS_REPLICATION_ENABLED\" = true\
    \ ]; then\n        echo \"  redis master (${1}:${REDIS_TLS_PORT})\"\n        sed\
    \ -i \"2s/^/sentinel monitor ${MASTER_GROUP} ${1} ${REDIS_TLS_PORT} ${QUORUM}\
    \ \\\\n/\" \"${SENTINEL_CONF}\"\n    else\n        echo \"  redis master (${1}:${REDIS_PORT})\"\
    \n        sed -i \"2s/^/sentinel monitor ${MASTER_GROUP} ${1} ${REDIS_PORT} ${QUORUM}\
    \ \\\\n/\" \"${SENTINEL_CONF}\"\n    fi\n    echo \"sentinel announce-ip ${ANNOUNCE_IP}\"\
    \ >> ${SENTINEL_CONF}\n    if [ \"$SENTINEL_PORT\" -eq 0 ]; then\n        echo\
    \ \"  announce (${ANNOUNCE_IP}:${SENTINEL_TLS_PORT})\"\n        echo \"sentinel\
    \ announce-port ${SENTINEL_TLS_PORT}\" >> ${SENTINEL_CONF}\n    else\n       \
    \ echo \"  announce (${ANNOUNCE_IP}:${SENTINEL_PORT})\"\n        echo \"sentinel\
    \ announce-port ${SENTINEL_PORT}\" >> ${SENTINEL_CONF}\n    fi\n}\n\nredis_update()\
    \ {\n    echo \"Updating redis config..\"\n    if [ \"$REDIS_TLS_REPLICATION_ENABLED\"\
    \ = true ]; then\n        echo \"  we are slave of redis master (${1}:${REDIS_TLS_PORT})\"\
    \n        echo \"slaveof ${1} ${REDIS_TLS_PORT}\" >> \"${REDIS_CONF}\"\n     \
    \   echo \"slave-announce-port ${REDIS_TLS_PORT}\" >> ${REDIS_CONF}\n    else\n\
    \        echo \"  we are slave of redis master (${1}:${REDIS_PORT})\"\n      \
    \  echo \"slaveof ${1} ${REDIS_PORT}\" >> \"${REDIS_CONF}\"\n        echo \"slave-announce-port\
    \ ${REDIS_PORT}\" >> ${REDIS_CONF}\n    fi\n    echo \"slave-announce-ip ${ANNOUNCE_IP}\"\
    \ >> ${REDIS_CONF}\n}\n\ncopy_config() {\n    echo \"Copying default redis config..\"\
    \n    echo \"  to '${REDIS_CONF}'\"\n    cp /readonly-config/redis.conf \"${REDIS_CONF}\"\
    \n    echo \"Copying default sentinel config..\"\n    echo \"  to '${SENTINEL_CONF}'\"\
    \n    cp /readonly-config/sentinel.conf \"${SENTINEL_CONF}\"\n}\n\nsetup_defaults()\
    \ {\n    echo \"Setting up defaults..\"\n    echo \"  using statefulset index\
    \ (${INDEX})\"\n    if [ \"${INDEX}\" = \"0\" ]; then\n        echo \"Setting\
    \ this pod as master for redis and sentinel..\"\n        echo \"  using announce\
    \ (${ANNOUNCE_IP})\"\n        redis_update \"${ANNOUNCE_IP}\"\n        sentinel_update\
    \ \"${ANNOUNCE_IP}\"\n        echo \"  make sure ${ANNOUNCE_IP} is not a slave\
    \ (slaveof no one)\"\n        sed -i \"s/^.*slaveof.*//\" \"${REDIS_CONF}\"\n\
    \    else\n        echo \"Getting redis master ip..\"\n        echo \"  blindly\
    \ assuming (${SERVICE}-announce-0) or (${SERVICE}-server-0) are master\"\n   \
    \     DEFAULT_MASTER=\"$(getent_hosts 0 | awk '{ print $1 }')\"\n        if [\
    \ -z \"${DEFAULT_MASTER}\" ]; then\n            echo \"Error: Unable to resolve\
    \ redis master (getent hosts).\"\n            exit 1\n        fi\n        echo\
    \ \"  identified redis (may be redis master) ip (${DEFAULT_MASTER})\"\n      \
    \  echo \"Setting default slave config for redis and sentinel..\"\n        echo\
    \ \"  using master ip (${DEFAULT_MASTER})\"\n        redis_update \"${DEFAULT_MASTER}\"\
    \n        sentinel_update \"${DEFAULT_MASTER}\"\n    fi\n}\n\nredis_ping() {\n\
    set +e\n    if [ \"$REDIS_PORT\" -eq 0 ]; then\n        redis-cli -h \"${MASTER}\"\
    \ -a \"${AUTH}\" --no-auth-warning -p \"${REDIS_TLS_PORT}\" --tls --cacert /tls-certs/ca.crt\
    \  --cert /tls-certs/redis.crt --key /tls-certs/redis.key ping\n    else\n   \
    \     redis-cli -h \"${MASTER}\" -a \"${AUTH}\" --no-auth-warning -p \"${REDIS_PORT}\"\
    \ ping\n    fi\nset -e\n}\n\nredis_ping_retry() {\n    ping=''\n    retry=${1}\n\
    \    sleep=3\n    for i in $(seq 1 \"${retry}\"); do\n        if [ \"$(redis_ping)\"\
    \ = \"PONG\" ]; then\n           ping='PONG'\n           break\n        fi\n \
    \       sleep $((sleep + i))\n        MASTER=$(sentinel_get_master)\n    done\n\
    \    echo \"${ping}\"\n}\n\nfind_master() {\n    echo \"Verifying redis master..\"\
    \n    if [ \"$REDIS_PORT\" -eq 0 ]; then\n        echo \"  ping (${MASTER}:${REDIS_TLS_PORT})\"\
    \n    else\n        echo \"  ping (${MASTER}:${REDIS_PORT})\"\n    fi\n    if\
    \ [ \"$(redis_ping_retry 3)\" != \"PONG\" ]; then\n        echo \"  $(date) Can't\
    \ ping redis master (${MASTER})\"\n        echo \"Attempting to force failover\
    \ (sentinel failover)..\"\n\n        if [ \"$SENTINEL_PORT\" -eq 0 ]; then\n \
    \           echo \"  on sentinel (${SERVICE}:${SENTINEL_TLS_PORT}), sentinel grp\
    \ (${MASTER_GROUP})\"\n            if redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_TLS_PORT}\"\
    \  --tls --cacert /tls-certs/ca.crt  --cert /tls-certs/redis.crt --key /tls-certs/redis.key\
    \ sentinel failover \"${MASTER_GROUP}\" | grep -q 'NOGOODSLAVE' ; then\n     \
    \           echo \"  $(date) Failover returned with 'NOGOODSLAVE'\"\n        \
    \        echo \"Setting defaults for this pod..\"\n                setup_defaults\n\
    \                return 0\n            fi\n        else\n            echo \" \
    \ on sentinel (${SERVICE}:${SENTINEL_PORT}), sentinel grp (${MASTER_GROUP})\"\n\
    \            if redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_PORT}\"  sentinel\
    \ failover \"${MASTER_GROUP}\" | grep -q 'NOGOODSLAVE' ; then\n              \
    \  echo \"  $(date) Failover returned with 'NOGOODSLAVE'\"\n                echo\
    \ \"Setting defaults for this pod..\"\n                setup_defaults\n      \
    \          return 0\n            fi\n        fi\n\n        echo \"Hold on for\
    \ 10sec\"\n        sleep 10\n        echo \"We should get redis master's ip now.\
    \ Asking (get-master-addr-by-name)..\"\n        if [ \"$SENTINEL_PORT\" -eq 0\
    \ ]; then\n            echo \"  sentinel (${SERVICE}:${SENTINEL_TLS_PORT}), sentinel\
    \ grp (${MASTER_GROUP})\"\n        else\n            echo \"  sentinel (${SERVICE}:${SENTINEL_PORT}),\
    \ sentinel grp (${MASTER_GROUP})\"\n        fi\n        MASTER=\"$(sentinel_get_master)\"\
    \n        if [ \"${MASTER}\" ]; then\n            echo \"  $(date) Found redis\
    \ master (${MASTER})\"\n            echo \"Updating redis and sentinel config..\"\
    \n            sentinel_update \"${MASTER}\"\n            redis_update \"${MASTER}\"\
    \n        else\n            echo \"$(date) Error: Could not failover, exiting...\"\
    \n            exit 1\n        fi\n    else\n        echo \"  $(date) Found reachable\
    \ redis master (${MASTER})\"\n        echo \"Updating redis and sentinel config..\"\
    \n        sentinel_update \"${MASTER}\"\n        redis_update \"${MASTER}\"\n\
    \    fi\n}\n\nredis_ro_update() {\n    echo \"Updating read-only redis config..\"\
    \n    echo \"  redis.conf set 'replica-priority 0'\"\n    echo \"replica-priority\
    \ 0\" >> ${REDIS_CONF}\n}\n\ngetent_hosts() {\n    index=${1:-${INDEX}}\n    service=\"\
    ${SERVICE}-announce-${index}\"\n    host=$(getent hosts \"${service}\")\n    echo\
    \ \"${host}\"\n}\n\nidentify_announce_ip() {\n    echo \"Identify announce ip\
    \ for this pod..\"\n    echo \"  using (${SERVICE}-announce-${INDEX}) or (${SERVICE}-server-${INDEX})\"\
    \n    ANNOUNCE_IP=$(getent_hosts | awk '{ print $1 }')\n    echo \"  identified\
    \ announce (${ANNOUNCE_IP})\"\n}\n\nmkdir -p /data/conf/\n\necho \"Initializing\
    \ config..\"\ncopy_config\n\n# where is redis master\nidentify_master\n\nidentify_announce_ip\n\
    \nif [ -z \"${ANNOUNCE_IP}\" ]; then\n    \"Error: Could not resolve the announce\
    \ ip for this pod.\"\n    exit 1\nelif [ \"${MASTER}\" ]; then\n    find_master\n\
    else\n    setup_defaults\nfi\n\nif [ \"${AUTH:-}\" ]; then\n    echo \"Setting\
    \ redis auth values..\"\n    ESCAPED_AUTH=$(echo \"${AUTH}\" | sed -e 's/[\\/&]/\\\
    \\&/g');\n    sed -i \"s/replace-default-auth/${ESCAPED_AUTH}/\" \"${REDIS_CONF}\"\
    \ \"${SENTINEL_CONF}\"\nfi\n\nif [ \"${SENTINELAUTH:-}\" ]; then\n    echo \"\
    Setting sentinel auth values\"\n    ESCAPED_AUTH_SENTINEL=$(echo \"$SENTINELAUTH\"\
    \ | sed -e 's/[\\/&]/\\\\&/g');\n    sed -i \"s/replace-default-sentinel-auth/${ESCAPED_AUTH_SENTINEL}/\"\
    \ \"$SENTINEL_CONF\"\nfi\n\necho \"$(date) Ready...\"\n"
  redis.conf: 'dir "/data"

    port 6379

    rename-command FLUSHDB ""

    rename-command FLUSHALL ""

    maxmemory 0

    maxmemory-policy volatile-lru

    min-replicas-max-lag 5

    min-replicas-to-write 1

    rdbchecksum yes

    rdbcompression yes

    repl-diskless-sync yes

    save ""

    requirepass replace-default-auth

    masterauth replace-default-auth

    '
  sentinel.conf: "dir \"/data\"\nport 26379\n    sentinel down-after-milliseconds\
    \ argocd 10000\n    sentinel failover-timeout argocd 180000\n    maxclients 10000\n\
    \    sentinel parallel-syncs argocd 5\nsentinel auth-pass argocd replace-default-auth\n"
  trigger-failover-if-master.sh: "get_redis_role() {\n  is_master=$(\n    redis-cli\
    \ \\\n      -a \"${AUTH}\" --no-auth-warning \\\n      -h localhost \\\n     \
    \ -p 6379 \\\n      info | grep -c 'role:master' || true\n  )\n}\nget_redis_role\n\
    if [[ \"$is_master\" -eq 1 ]]; then\n  echo \"This node is currently master, we\
    \ trigger a failover.\"\n  response=$(\n    redis-cli \\\n      -h localhost \\\
    \n      -p 26379 \\\n      SENTINEL failover argocd\n  )\n  if [[ \"$response\"\
    \ != \"OK\" ]] ; then\n    echo \"$response\"\n    exit 1\n  fi\n  timeout=30\n\
    \  while [[ \"$is_master\" -eq 1 && $timeout -gt 0 ]]; do\n    sleep 1\n    get_redis_role\n\
    \    timeout=$((timeout - 1))\n  done\n  echo \"Failover successful\"\nfi\n"
kind: ConfigMap
metadata:
  labels:
    app: argocd-redis-ha
    chart: redis-ha-4.26.1
    heritage: Helm
    release: argocd
  name: argocd-redis-ha-configmap
  namespace: argocd
